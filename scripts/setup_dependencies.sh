#!/usr/bin/env bash
#
# setup_dependencies.sh - Install system dependencies and build third-party libraries.
#
# This script can be run on a host system or inside Docker/CI environments. It detects the
# host operating system, installs required system packages when possible, and then builds
# OSQP and OsqpEigen into a writable prefix. Usage examples:
#   ./scripts/setup_dependencies.sh                  # install system packages (if supported) and build libraries
#   PREFIX="$HOME/.local" ./scripts/setup_dependencies.sh  # override the install prefix
#   ./scripts/setup_dependencies.sh --no-system-packages    # skip package manager actions (use if dependencies are preinstalled)
#
# The built libraries are installed to $PREFIX (defaults to $HOME/.local) and the script
# configures CMAKE_PREFIX_PATH so subsequent CMake invocations can discover them.
set -euo pipefail

usage() {
    cat <<USAGE
Usage: $0 [--no-system-packages]

Options:
  --no-system-packages   Skip system package installation (useful when dependencies are
                         already present or when running without root privileges).
  -h, --help             Show this help message and exit.
USAGE
}

INSTALL_SYSTEM_PACKAGES=1
for arg in "$@"; do
    case "$arg" in
        --no-system-packages)
            INSTALL_SYSTEM_PACKAGES=0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown argument: $arg" >&2
            usage >&2
            exit 1
            ;;
    esac
done

HOST_UNAME=$(uname -s)
DISTRO="unknown"
if command -v lsb_release >/dev/null 2>&1; then
    DISTRO=$(lsb_release -ds)
elif [[ -f /etc/os-release ]]; then
    # shellcheck disable=SC1091
    . /etc/os-release
    DISTRO=${PRETTY_NAME:-$NAME}
fi

echo "üîç Detected platform: ${HOST_UNAME} (${DISTRO})"

run_with_privilege() {
    if [[ $(id -u) -eq 0 ]]; then
        "$@"
    elif command -v sudo >/dev/null 2>&1; then
        sudo "$@"
    else
        echo "‚ö†Ô∏è  Cannot escalate privileges to run: $*" >&2
        echo "    Install system packages manually or rerun the script with --no-system-packages." >&2
        exit 1
    fi
}

detect_package_manager() {
    if command -v apt-get >/dev/null 2>&1; then
        echo "apt"
    elif command -v brew >/dev/null 2>&1; then
        echo "brew"
    elif command -v pacman >/dev/null 2>&1; then
        echo "pacman"
    elif command -v dnf >/dev/null 2>&1; then
        echo "dnf"
    elif command -v yum >/dev/null 2>&1; then
        echo "yum"
    else
        echo ""
    fi
}

install_system_packages() {
    local manager
    manager=$(detect_package_manager)

    if [[ -z $manager ]]; then
        echo "‚ö†Ô∏è  No supported package manager detected."
        echo "    Install build-essential, cmake, Eigen3, OpenMP, and git manually or rerun with --no-system-packages." >&2
        exit 1
    fi

    echo "üì¶ Installing system packages using $manager..."
    case "$manager" in
        apt)
            run_with_privilege apt-get update
            run_with_privilege apt-get install -y build-essential cmake libeigen3-dev libomp-dev git
            ;;
        brew)
            brew update
            brew install cmake eigen libomp git
            ;;
        pacman)
            run_with_privilege pacman -Sy --noconfirm
            run_with_privilege pacman -S --needed --noconfirm base-devel cmake eigen openmp git
            ;;
        dnf)
            run_with_privilege dnf install -y @"Development Tools" cmake eigen3-devel libomp-devel git
            ;;
        yum)
            run_with_privilege yum groupinstall -y "Development Tools"
            run_with_privilege yum install -y cmake eigen3-devel libomp-devel git
            ;;
        *)
            echo "‚ö†Ô∏è  Unsupported package manager: $manager" >&2
            echo "    Install dependencies manually or rerun with --no-system-packages." >&2
            exit 1
            ;;
    esac
}

if [[ $INSTALL_SYSTEM_PACKAGES -eq 1 ]]; then
    install_system_packages
else
    echo "‚è≠Ô∏è  Skipping system package installation (per --no-system-packages)."
fi

PREFIX="${PREFIX:-$HOME/.local}"
mkdir -p "$PREFIX"

if [[ -n ${CMAKE_PREFIX_PATH:-} ]]; then
    export CMAKE_PREFIX_PATH="$PREFIX:$CMAKE_PREFIX_PATH"
else
    export CMAKE_PREFIX_PATH="$PREFIX"
fi

ENV_SNIPPET="$PREFIX/share/multi_agent_solver/environment.sh"
mkdir -p "$(dirname "$ENV_SNIPPET")"
{
    cat <<'EOF'
# shellcheck shell=bash
#
# Generated by setup_dependencies.sh. Source this file to expose the
# third-party prefix so that downstream CMake invocations can discover
# OSQP and OsqpEigen. The guard avoids duplicating the entry when the file
# is sourced multiple times.
EOF
    echo "mas_prefix=\"$PREFIX\""
    cat <<'EOF'
case ":${CMAKE_PREFIX_PATH:-}:" in
  *:"${mas_prefix}":*) ;;
  *)
    if [[ -n ${CMAKE_PREFIX_PATH:-} ]]; then
      export CMAKE_PREFIX_PATH="${mas_prefix}:${CMAKE_PREFIX_PATH}"
    else
      export CMAKE_PREFIX_PATH="${mas_prefix}"
    fi
    ;;
esac
EOF
} > "$ENV_SNIPPET"

get_parallel_jobs() {
    if command -v nproc >/dev/null 2>&1; then
        nproc
    elif [[ $HOST_UNAME == "Darwin" ]]; then
        sysctl -n hw.ncpu
    else
        echo 1
    fi
}

JOBS=$(get_parallel_jobs)

echo "üìÅ Installing third-party libraries to: $PREFIX"

WORK_DIR=$(mktemp -d)
trap 'rm -rf "$WORK_DIR"' EXIT

OSQP_DIR="$WORK_DIR/osqp"
OSQP_EIGEN_DIR="$WORK_DIR/osqp-eigen"

echo "üîΩ Cloning OSQP repository..."
git clone --depth 1 https://github.com/osqp/osqp.git "$OSQP_DIR"

cmake -S "$OSQP_DIR" -B "$OSQP_DIR/build" \
    -G "Unix Makefiles" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$PREFIX"
cmake --build "$OSQP_DIR/build" --config Release --target install -- -j"$JOBS"

echo "üîΩ Cloning OsqpEigen repository..."
git clone --depth 1 https://github.com/robotology/osqp-eigen.git "$OSQP_EIGEN_DIR"

cmake -S "$OSQP_EIGEN_DIR" -B "$OSQP_EIGEN_DIR/build" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$PREFIX" \
    -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
cmake --build "$OSQP_EIGEN_DIR/build" --config Release --target install -- -j"$JOBS"

echo "‚úÖ OSQP and OsqpEigen installed successfully."
echo "   To use them in your own builds, ensure that CMAKE_PREFIX_PATH includes: $PREFIX"
echo "   Environment hints written to: $ENV_SNIPPET (source this file to reuse the prefix)."

echo "‚ú® Setup complete."
